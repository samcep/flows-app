// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using flows_app;

#nullable disable

namespace flows_app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250510193915_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("flows_app.Entities.Field", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = "F-0001",
                            Name = "Primer nombre"
                        },
                        new
                        {
                            Id = "F-0002",
                            Name = "Segundo nombre"
                        },
                        new
                        {
                            Id = "F-0003",
                            Name = "Primer apellido"
                        },
                        new
                        {
                            Id = "F-0004",
                            Name = "Segundo apellido"
                        },
                        new
                        {
                            Id = "F-0005",
                            Name = "Tipo de documento"
                        },
                        new
                        {
                            Id = "F-0006",
                            Name = "Número de documento"
                        });
                });

            modelBuilder.Entity("flows_app.Entities.Flow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Flows");

                    b.HasData(
                        new
                        {
                            Id = "FLW-0001",
                            Name = "Solicitud de producto financiero"
                        });
                });

            modelBuilder.Entity("flows_app.Entities.FlowStep", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StepId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("StepId");

                    b.ToTable("FlowSteps");

                    b.HasData(
                        new
                        {
                            Id = "FST-0001",
                            FlowId = "FLW-0001",
                            Order = 1,
                            StepId = "STP-0001"
                        },
                        new
                        {
                            Id = "FST-0002",
                            FlowId = "FLW-0001",
                            Order = 2,
                            StepId = "STP-0002"
                        },
                        new
                        {
                            Id = "FST-0003",
                            FlowId = "FLW-0001",
                            Order = 3,
                            StepId = "STP-0003"
                        });
                });

            modelBuilder.Entity("flows_app.Entities.FlowStepDependency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DependsOnFlowStepId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowStepId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DependsOnFlowStepId");

                    b.HasIndex("FlowStepId");

                    b.ToTable("FlowStepDependencies");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DependsOnFlowStepId = "FST-0001",
                            FlowStepId = "FST-0002"
                        },
                        new
                        {
                            Id = "2",
                            DependsOnFlowStepId = "FST-0002",
                            FlowStepId = "FST-0003"
                        });
                });

            modelBuilder.Entity("flows_app.Entities.FlowStepField", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Direction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("FieldId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowStepId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FlowStepId");

                    b.ToTable("FlowStepFields");

                    b.HasData(
                        new
                        {
                            Id = "FSF-0001",
                            Direction = 1,
                            FieldId = "F-0005",
                            FlowStepId = "FST-0001"
                        },
                        new
                        {
                            Id = "FSF-0002",
                            Direction = 1,
                            FieldId = "F-0006",
                            FlowStepId = "FST-0001"
                        },
                        new
                        {
                            Id = "FSF-0003",
                            Direction = 1,
                            FieldId = "F-0001",
                            FlowStepId = "FST-0002"
                        },
                        new
                        {
                            Id = "FSF-0004",
                            Direction = 1,
                            FieldId = "F-0003",
                            FlowStepId = "FST-0002"
                        },
                        new
                        {
                            Id = "FSF-0005",
                            Direction = 2,
                            FieldId = "F-0001",
                            FlowStepId = "FST-0003"
                        });
                });

            modelBuilder.Entity("flows_app.Entities.Step", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            Id = "STP-0001",
                            Name = "Registro de usuario"
                        },
                        new
                        {
                            Id = "STP-0002",
                            Name = "Formulario de datos personales"
                        },
                        new
                        {
                            Id = "STP-0003",
                            Name = "Confirmación de correo"
                        });
                });

            modelBuilder.Entity("flows_app.Entities.FlowStep", b =>
                {
                    b.HasOne("flows_app.Entities.Flow", "Flow")
                        .WithMany("FlowSteps")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("flows_app.Entities.Step", "Step")
                        .WithMany("FlowSteps")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("flows_app.Entities.FlowStepDependency", b =>
                {
                    b.HasOne("flows_app.Entities.FlowStep", "DependsOnFlowStep")
                        .WithMany()
                        .HasForeignKey("DependsOnFlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("flows_app.Entities.FlowStep", "FlowStep")
                        .WithMany("DependedBy")
                        .HasForeignKey("FlowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DependsOnFlowStep");

                    b.Navigation("FlowStep");
                });

            modelBuilder.Entity("flows_app.Entities.FlowStepField", b =>
                {
                    b.HasOne("flows_app.Entities.Field", "Field")
                        .WithMany("FlowStepFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("flows_app.Entities.FlowStep", "FlowStep")
                        .WithMany("FlowStepFields")
                        .HasForeignKey("FlowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("FlowStep");
                });

            modelBuilder.Entity("flows_app.Entities.Field", b =>
                {
                    b.Navigation("FlowStepFields");
                });

            modelBuilder.Entity("flows_app.Entities.Flow", b =>
                {
                    b.Navigation("FlowSteps");
                });

            modelBuilder.Entity("flows_app.Entities.FlowStep", b =>
                {
                    b.Navigation("DependedBy");

                    b.Navigation("FlowStepFields");
                });

            modelBuilder.Entity("flows_app.Entities.Step", b =>
                {
                    b.Navigation("FlowSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
